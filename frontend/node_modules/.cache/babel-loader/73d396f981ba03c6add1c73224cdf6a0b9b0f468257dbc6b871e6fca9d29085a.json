{"ast":null,"code":"//http.js\nimport { QueryClient } from \"@tanstack/react-query\";\nexport const queryClient = new QueryClient();\nexport async function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    const error = new Error(\"Could not fetch events\");\n    error.code = response.status;\n    error.info = await response.json();\n    throw error;\n  }\n  const {\n    events\n  } = await response.json();\n  return events;\n}\nexport async function eventDetailLoader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    const error = new Error(\"Could not fetch event details\");\n    error.code = response.status;\n    error.info = await response.json();\n    throw error;\n  } else {\n    const data = await response.json();\n    return data;\n  }\n}\nexport async function deleteAction({\n  eventId,\n  request\n}) {\n  const id = eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + id, {\n    method: DELE\n  });\n  if (!response.ok) {\n    const error = new Error(\"Could not fetch event details\");\n    error.code = response.status;\n    error.info = await response.json();\n    throw error;\n  }\n}\nexport async function createEditEventAction(formData) {\n  const response = await fetch(`http://localhost:8080/events`, {\n    method: \"POST\",\n    body: JSON.stringify(formData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    const error = new Error(\"An error occurred while creating the event\");\n    error.code = response.status;\n    error.info = await response.json();\n    throw error;\n  }\n  const {\n    event\n  } = await response.json();\n  return event;\n}","map":{"version":3,"names":["QueryClient","queryClient","loadEvents","response","fetch","ok","error","Error","code","status","info","json","events","eventDetailLoader","request","params","id","eventId","data","deleteAction","method","DELE","createEditEventAction","formData","body","JSON","stringify","headers","event"],"sources":["D:/Vusal/programming/React Udemy/21 SPA with React Query/12-adv-starting-project/frontend/src/util/http.js"],"sourcesContent":["//http.js\r\nimport { QueryClient } from \"@tanstack/react-query\";\r\nexport const queryClient = new QueryClient();\r\n\r\nexport async function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    const error = new Error(\"Could not fetch events\");\r\n    error.code = response.status;\r\n    error.info = await response.json();\r\n    throw error;\r\n  }\r\n\r\n  const { events } = await response.json();\r\n\r\n  return events;\r\n}\r\n\r\nexport async function eventDetailLoader({ request, params }) {\r\n  const id = params.eventId;\r\n\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  if (!response.ok) {\r\n    const error = new Error(\"Could not fetch event details\");\r\n    error.code = response.status;\r\n    error.info = await response.json();\r\n    throw error;\r\n  } else {\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n}\r\n\r\nexport async function deleteAction({ eventId, request }) {\r\n  const id = eventId;\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id, {\r\n    method: DELE,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = new Error(\"Could not fetch event details\");\r\n    error.code = response.status;\r\n    error.info = await response.json();\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function createEditEventAction(formData) {\r\n  const response = await fetch(`http://localhost:8080/events`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(formData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = new Error(\"An error occurred while creating the event\");\r\n    error.code = response.status;\r\n    error.info = await response.json();\r\n    throw error;\r\n  }\r\n\r\n  const { event } = await response.json();\r\n\r\n  return event;\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,OAAO,MAAMC,WAAW,GAAG,IAAID,WAAW,CAAC,CAAC;AAE5C,OAAO,eAAeE,UAAUA,CAAA,EAAG;EACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IACjDD,KAAK,CAACE,IAAI,GAAGL,QAAQ,CAACM,MAAM;IAC5BH,KAAK,CAACI,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,MAAML,KAAK;EACb;EAEA,MAAM;IAAEM;EAAO,CAAC,GAAG,MAAMT,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAExC,OAAOC,MAAM;AACf;AAEA,OAAO,eAAeC,iBAAiBA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAC3D,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGY,EAAE,CAAC;EAElE,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IACxDD,KAAK,CAACE,IAAI,GAAGL,QAAQ,CAACM,MAAM;IAC5BH,KAAK,CAACI,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,MAAML,KAAK;EACb,CAAC,MAAM;IACL,MAAMY,IAAI,GAAG,MAAMf,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOO,IAAI;EACb;AACF;AAEA,OAAO,eAAeC,YAAYA,CAAC;EAAEF,OAAO;EAAEH;AAAQ,CAAC,EAAE;EACvD,MAAME,EAAE,GAAGC,OAAO;EAClB,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGY,EAAE,EAAE;IACjEI,MAAM,EAAEC;EACV,CAAC,CAAC;EAEF,IAAI,CAAClB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IACxDD,KAAK,CAACE,IAAI,GAAGL,QAAQ,CAACM,MAAM;IAC5BH,KAAK,CAACI,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,MAAML,KAAK;EACb;AACF;AAEA,OAAO,eAAegB,qBAAqBA,CAACC,QAAQ,EAAE;EACpD,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3DgB,MAAM,EAAE,MAAM;IACdI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC;IAC9BI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EAEF,IAAI,CAACxB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,4CAA4C,CAAC;IACrED,KAAK,CAACE,IAAI,GAAGL,QAAQ,CAACM,MAAM;IAC5BH,KAAK,CAACI,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,MAAML,KAAK;EACb;EAEA,MAAM;IAAEsB;EAAM,CAAC,GAAG,MAAMzB,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAEvC,OAAOiB,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}